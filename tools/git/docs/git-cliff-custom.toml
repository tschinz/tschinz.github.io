# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file. See [conventional commits](https://www.conventionalcommits.org/) for commit guidelines.\n
"""
# template for the changelog body
body = """
---
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - **({{commit.scope}})**{% if commit.breaking %} [**breaking**]{% endif %} \
            {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commits/{{ commit.id }})) - {{ commit.author.name }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {% if commit.breaking %} [**breaking**]{% endif %}\
                {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commits/{{ commit.id }})) - {{ commit.author.name }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  # replace repository URL
  { pattern = '\$REPO', replace = "https://github.com/tschinz/tschinz.github.io" },
]

# render body even when there are no releases to process
# render_always = true
# output file path
output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/tschinz/tschinz.github.io/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat(ure)?s?", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix(es)?", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^docs?", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf(ormance)?s?", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactors?", group = "<!-- 2 -->🚜 Refactoring" },
  { message = "^styles?", group = "<!-- 5 -->🎨 Styling" },
  { message = "^tests?", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chores?", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { message = "^security", group = "<!-- 8 -->🛡️ Security" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^reverts?", group = "<!-- 9 -->◀️ Revert" },

  # Conventional commit exclusions
  { message = "^chores?\\(releases?\\):", skip = true },
  { message = "^chores?\\(deps?.*\\)", skip = true },
  { message = "^chores?\\(pr\\)", skip = true },
  { message = "^chores?\\(pull\\)", skip = true },
  { message = "^chores?\\(version\\):", skip = true },

  # Legacy commit styles
  { message = "(?i)^ADD", group = "<!-- 0 -->🚀 Features" },
  { message = "(?i)^CHG", group = "<!-- 0 -->🚀 Features" },
  { message = "(?i)^REM", group = "<!-- 2 -->🚜 Refactoring" },
  { message = "(?i)^MOV", group = "<!-- 2 -->🚜 Refactoring" },
  { message = "(?i)^FIX", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "(?i)^NOTE", group = "<!-- 10 -->💼 Other" },
  { message = "(?i)^WARN", group = "<!-- 8 -->🛡️ Security" },

  { message = ".*", group = "<!-- 10 -->💼 Other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
